<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | Sandors Systems Scribbles]]></title>
  <link href="http://e30chris.github.io/categories/ansible/atom.xml" rel="self"/>
  <link href="http://e30chris.github.io/"/>
  <updated>2014-06-16T13:53:51-07:00</updated>
  <id>http://e30chris.github.io/</id>
  <author>
    <name><![CDATA[chris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Ansible]]></title>
    <link href="http://e30chris.github.io/installing-ansible/"/>
    <updated>2014-06-16T13:15:00-07:00</updated>
    <id>http://e30chris.github.io/installing-ansible</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>Need to deploy an Ansible Controller to run Playbooks from that uses the latest build and is easy to upgrade/configure.</p>

<h2>The Solution</h2>

<p>Install Ansible from the latest release on GitHub.</p>

<h2>The Goal</h2>

<p>Create an Ansible Controller directory that will run the latest version via git clone and setup the shell with the Ansible environment scripts.</p>

<!-- more -->


<hr />

<h2>Clone the Ansible repo</h2>

<p>Go to the GitHub project page <a href="https://github.com/ansible/ansible">github/ansible</a></p>

<p>Choose a release version or the dev branch and clone.</p>

<p><code>
sandor@pineapplez:$ mkdir ~/Codestuff/AnsibleController &lt;-- Ansible runs from here
sandor@pineapplez:$ mkdir ~/Codestuff/ansibles &lt;-- Playbooks go here
sandor@pineapplez:$ cd ~/Codestuff/AnsibleController
sandor@pineapplez:$ git@github.com:ansible/ansible.git
</code></p>

<h2>Run the environment script</h2>

<p><code>
sandor@pineapplez:$ ./hacking/env-setup
</code></p>

<p>To upgrade Ansible just go back into the AnsibleController directory and use git to get the latest.</p>

<p>You are now setup to run Ansible from the Controller.  Push some SSH public keys and start pushing playbooks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ansible to deploy a PuppetMaster]]></title>
    <link href="http://e30chris.github.io/using-ansible-to-deploy-a-puppetmaster/"/>
    <updated>2014-06-13T10:58:00-07:00</updated>
    <id>http://e30chris.github.io/using-ansible-to-deploy-a-puppetmaster</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>Need to deploy a new Puppet Enterprise cluster with a PuppetMaster, PuppetConsole and a PuppetDB while avoiding typos and misconfigurations.  Also need to deploy to several environments using a consistent configuration.</p>

<h1>The Solution</h1>

<p>Use Ansible to deploy Puppet onto freshly built servers that contain just a SysAdmins SSH public key.</p>

<h1>The Goal</h1>

<p>A repeatable and documented way to deploy the very finicky Puppet installer in any environment needed from local vagrants to the clouds of vSphere, AWS, RackSpace or Digital Ocean.</p>

<!-- more -->


<h1>GitHub Repo</h1>

<p><a href="https://github.com/e30chris/Ansible-PuppetEnterpriseDeploy">github.com/e30chris/Ansible-PuppetEnterpriseDeploy</a></p>

<hr />

<h1>Playbook notes</h1>

<h2>Setting the variables for each environment</h2>

<p>```
sandor@pineapplez:$ cd ~/Ansible-PuppetEnterpriseDeploy/</p>

<h2>sandor@pineapplez:$ cat group_vars/all</h2>

<h1>common variables for PuppetMaster Deployment</h1>

<h1>format for this file</h1>

<h1>variable: fact</h1>

<p>#</p>

<h1>version of Puppet Enterprise</h1>

<p>pe_version: 3.2.3</p>

<h1>os family</h1>

<p>os_family: debian
os_version: 7
os_arch: amd64</p>

<h1>pe installer</h1>

<p>pe_installer: puppet-enterprise-&ldquo;&rdquo;&ndash;&ldquo;&rdquo;&ndash;&ldquo;&rdquo;&ndash;&ldquo;&rdquo;</p>

<h1>hostnames</h1>

<p>pupmaster_hostname: pupmaster.local
pupdb_hostname: pupdb.local
pupconsole_hostname: pupconsole.local</p>

<h1>IP&rsquo;s</h1>

<p>pupmaster_ip: 10.0.0.10
pupdb_ip: 10.0.0.11
pupconsole_ip: 10.0.0.12</p>

<h1>dns salt hostnames</h1>

<p>pupmaster_salt_hostnames: puppet,puppetmaster
pupdb_salt_hostnames: puppetdb
pupconsole_salt_hostname: pupconsole</p>

<h1>passwords</h1>

<p>console_auth_db_pass: arandompasswordthatneedschangedhere
console_db_pass: arandompasswordthatneedschangedhere
pupdb_db_pass: arandompasswordthatneedschangedhere
db_root_pass: arandompasswordthatneedschangedhere</p>

<p>```</p>

<p>To keep it simple only the values that should be changed are assigned variables.  Everything else is left with the Puppet defaults in the answer files.</p>

<hr />

<h1>Tasks to be run on all servers</h1>

<p>Puppet needs very perfect name resolution between all agents and the PuppetMaster.  Having a <strong>perfect</strong> hosts file on each server is required.</p>

<p>```
&ndash; name: Ensure common etc hosts file
  template:</p>

<pre><code>src="../templates/hosts.j2"
dest=/etc/hosts
</code></pre>

<p>```</p>

<p>To keep things simple all the installation tasks will run out of a /puppetinstall directory.  This should be in the user home dir that is running the installer.  The examples here use root but the SysAdmin Bible states never use root always use <strong>sudo</strong>.</p>

<p>```
&ndash; name: Ensure Puppet installer directory present
  file:</p>

<pre><code>path=/root/puppetinstall
state=directory
</code></pre>

<ul>
<li>name: Ensure install log present
file:
  path=/root/puppetinstall/pupconsole_install.log
  owner=root
  state=touch
```</li>
</ul>


<p>When you download the PE tarball you can grab the download url from S3.  This grabs the version you need and extracts it into the installer dir.</p>

<p>```
&ndash; name: Ensure PE tarball present
  get_url:</p>

<pre><code>url=https://s3.amazonaws.com/pe-builds/released/""/"".tar.gz
dest=/root/"".tar.gz
force=no
</code></pre>

<ul>
<li>name: Ensure Puppet untar&rsquo;d to install directory
unarchive:
  copy=no
  src=/root/&ldquo;&rdquo;.tar.gz
  dest=/root/puppetinstall
```</li>
</ul>


<hr />

<h1>Tasks that run on each server role</h1>

<p>Each server then runs the same basic installer command with a few things named for each role like the installer log.</p>

<p>```
&ndash; name: answer file for PupMaster
  template:</p>

<pre><code>src="../templates/pupmaster.answer.j2"
dest=/root/puppetinstall/""/answers/pupmaster.answer
</code></pre>

<ul>
<li>name: run the pe installer
command: /root/puppetinstall/&ldquo;&rdquo;/puppet-enterprise-installer -a /root/puppetinstall/&ldquo;&rdquo;/answers/pupmaster.answer | tee /root/puppetinstall/pupmaster_install.log</li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GoAccess to parse webserver logs]]></title>
    <link href="http://e30chris.github.io/using-goaccess-to-parse-webserver-logs/"/>
    <updated>2014-04-01T23:54:00-07:00</updated>
    <id>http://e30chris.github.io/using-goaccess-to-parse-webserver-logs</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>Need the ability to track web traffic for a specific hours worth of logs.</p>

<h1>The Solution</h1>

<p>Using GoAccess to parse Apache logs that are rotated into hour chunks.</p>

<h1>The Goal</h1>

<p>Install GoAccess to parse webserver logs.  Use Ansible Playbooks for the installation, configuration and for re-usabilty of GoAccess on other servers.  Keep it simple by rotating logs on the hour.</p>

<!-- more -->


<h1>The Links</h1>

<ul>
<li>GoAccess &ndash; <a href="https://github.com/allinurl/goaccess/">real-time web log analyzer &ndash; allinurl/goaccess</a></li>
<li>Ansible &ndash; <a href="http://docs.ansible.com/">Ansible Docs</a></li>
<li>Apache rotatelogs &ndash; <a href="https://httpd.apache.org/docs/2.2/programs/rotatelogs.html">Hourly Rotated WebServer Logs</a></li>
<li>Digital Ocean &ndash; <a href="https://www.digitalocean.com/?refcode=980586449ebd">My referral link, thanks!</a></li>
<li>TugBoat &ndash; <a href="https://github.com/pearkes/tugboat">CLI for DO &ndash; pearkes/tugboat</a></li>
</ul>


<h1>Ansible Playbook &ndash; Install GoAccess</h1>

<p>Create the GoAccess Playbook.  This installs GoAccess using Apt on Debian.</p>

<script src="https://gist.github.com/e30chris/9929303.js"></script>


<p>Run the playbook with Ansible.</p>

<p><code>
sandor@pineapplez:$ ansible-playbook ~/playbooks/goaccess/goaccess.yml -vvvv
</code></p>

<h1>GoAccess Usage</h1>

<p>Now that GoAccess is installed on the server we can login and parse the webserver logs.</p>

<p><code>
sandor@argo:/var/log/apache2$ goaccess -f apache2.log
</code></p>

<p>GoAccess now parses the log and outputs the results in a configurable format.  You can also export the results into various file formats.</p>

<p>Here is a screenshot that shows how many times an IP has hit the webserver.</p>

<p><img class="<a" src="href="https://s3.amazonaws.com/sandorssystemsscribbles/GoAccessScreen.png">https://s3.amazonaws.com/sandorssystemsscribbles/GoAccessScreen.png</a>"></p>

<p>To keep it simple install Apache rotatelog and set the logs to rollover on the hour.  Then GoAccess can parse the logs by the hour.</p>

<p>Apache rotatelog setting for hourly logs:</p>

<p><code>
CustomLog "|bin/rotatelogs -l /var/log/apache2.%Y-%m-%d-%H 3600" common
</code></p>

<p>Parsing a specific hours logs with GoAccess</p>

<p>Example &ndash; Logs for 8am April, 2 2014.</p>

<p><code>
sandor@argo:/var/log/apache2$ goaccess -f apache2.2014-04-02-08
</code></p>
]]></content>
  </entry>
  
</feed>
