<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | Sandors Systems Scribbles]]></title>
  <link href="http://e30chris.github.io/categories/ansible/atom.xml" rel="self"/>
  <link href="http://e30chris.github.io/"/>
  <updated>2014-09-05T12:30:23-07:00</updated>
  <id>http://e30chris.github.io/</id>
  <author>
    <name><![CDATA[chris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible on HP-UX 11.31]]></title>
    <link href="http://e30chris.github.io/ansible-on-hp-ux-11-dot-31/"/>
    <updated>2014-09-03T17:11:00-07:00</updated>
    <id>http://e30chris.github.io/ansible-on-hp-ux-11-dot-31</id>
    <content type="html"><![CDATA[<h2>The problem</h2>

<p>Old corporations that are running ancient OS'es desperately need configuration management and automation to keep the dinosaurs efficient.</p>

<h2>The goal</h2>

<p>Install Python on HP-UX so Ansible can manage and automate the ancient servers.</p>

<h2>HowTo</h2>

<p><code>
sandor@pineapplez:$ ansible -i hosts all -m raw -a "swinstall -x mount_all_filesystems=false -s depotserver:/depot/11.31/python python"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible on RedHat 5.x]]></title>
    <link href="http://e30chris.github.io/ansible-on-redhat-5-dot-x/"/>
    <updated>2014-09-03T16:39:00-07:00</updated>
    <id>http://e30chris.github.io/ansible-on-redhat-5-dot-x</id>
    <content type="html"><![CDATA[<h2>The problem</h2>

<p>Older Pythons that live on older RedHats do not have json support.  Old corporations still use old OS'es like RedHat 5.x but need to use modern configuration management tools like Ansible.</p>

<h2>The goal</h2>

<p>Enable RedHat 5.x systems to run Ansible by installing json support on Python 2.4.</p>

<h2>HowTo</h2>

<p><em>Using Ansible Raw</em></p>

<p><code>
sandor@pineapplez:$ ansible -i hosts all -m raw -a "yum -y install python-simplejson"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Ansible through pmksh]]></title>
    <link href="http://e30chris.github.io/run-ansible-through-pmksh/"/>
    <updated>2014-09-03T11:53:00-07:00</updated>
    <id>http://e30chris.github.io/run-ansible-through-pmksh</id>
    <content type="html"><![CDATA[<h2>The problem</h2>

<p>Old corporations use shitty old software to do things that modern Linux is really good at doing itself.  Using pmksh instead of a well laid out sudoers setup is what the problem is.</p>

<h2>The goal</h2>

<p>Configure Ansible playbooks to execute through the pmksh shell on the targeted servers.</p>

<!-- more -->


<h2>Shells &amp; Ansible</h2>

<p>Currently Ansible &amp; Python work together to take the output from bash and report back with formatting.  Ansible does not understand ksh talk making running through pmksh a workaround for now.  Once Ansible add ksh to its list of shells then the current set of playbooks that are using &lsquo;command&rsquo; can move to using the full suite of modules.</p>

<p>The AIX setup I am Ansiblizing now using bash shell for standard user commands and pmksh for all root level (yes it should be sudoers) commands.  Tasks that do not need root level permissions I am using standard modules.  Tasks that need root I am using the following HowTo.</p>

<p>Ansible Shells:</p>

<p><a href="https://github.com/ansible/ansible/tree/devel/lib/ansible/runner/shell_plugins">github repo &ndash; ansible/ansible/tree/devel/lib/ansible/runner/shell_plugins</a></p>

<h2>HowTo</h2>

<p>Current Workaround:</p>

<p><code>
sandor@pineapplez:$ ansible -i hosts all -m command -a "/opt/quest/bin/pmksh -c '/bin/touch /root/bmw.325'"
</code></p>

<p>```
tasks:</p>

<ul>
<li>name: run a command through pmksh
command: &ldquo;/opt/quest/bin/pmksh -c /bin/touch /root/bmw.325'&rdquo;
```</li>
</ul>


<p><em>once ksh is added to the list of shells I will update this post</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ansible to Align Passwords on Servers]]></title>
    <link href="http://e30chris.github.io/using-ansible-to-align-passwords-on-servers/"/>
    <updated>2014-07-17T11:16:00-07:00</updated>
    <id>http://e30chris.github.io/using-ansible-to-align-passwords-on-servers</id>
    <content type="html"><![CDATA[<h2>The Problem:</h2>

<p>A group of servers get their passwords updated every 3 months with a new shared password.  The servers passwords are then inconsistently updated leaving a group of servers with one of several possible user passwords.</p>

<h2>The Goal:</h2>

<p>Use Ansible to attempt to login to each server using each of the possible passwords to find the correct one and log it.  The final step of the playbook will have Ansible logging into each server using the found to be correct password and updating each server to a new shared password.</p>

<p><em><strong>note &ndash; using the same root password on all your servers is a terrible idea and completely against the SysAdmin Bible.  Use random passwords and keys!</strong></em></p>

<!-- more -->


<h2>HowTo:</h2>

<ul>
<li>Download the playbook from

<ul>
<li>GitHub &ndash; <a href="https://github.com/e30chris/Ansible-AlignPassword">repo</a></li>
<li>Galaxy &ndash; <a href="https://galaxy.ansible.com/list#/roles/1134">repo</a></li>
</ul>
</li>
<li>Create a branch to edit the variables for your environment</li>
</ul>


<p>  <code>
  sandor@pineapplez:$ cd ~/Codestuff/ansibles/Ansible-AlignPassword
  sandor@pineapplez:$ git checkout -b qatenv    
 </code></p>

<ul>
<li>ansible-vault the file that will contain the passwords.</li>
</ul>


<p>  <code>
  sandor@pineapplez:$ ansible-vault encrypt group_vars/all
 </code></p>

<ul>
<li>Edit the vars for the environment</li>
</ul>


<p>  <code>
  sandor@pineapplez:$ ansible-vault edit group_vars/all
 </code></p>

<ul>
<li>Add the inventory to hosts</li>
<li>Verify Ansible connect with ping pong</li>
</ul>


<p>  <code>
  sandor@pineapplez:$ ansible -i hosts all -m ping
 </code></p>

<ul>
<li>Run the playbook</li>
</ul>


<p>  <code>
  sandor@pineapplez:$ ansible-playbook -i hosts site.yml -vv
 </code></p>

<h2>Common Task Actions</h2>

<ul>
<li>Attempt to login to each server using all possible passwords</li>
<li>Register which passwords work on each server</li>
<li>Set a new shared password for every server</li>
</ul>


<h2>Variables</h2>

<p>Go here:</p>

<p><code>
group_vars/all
</code></p>

<p>With this format:</p>

<p><code>
variable: value
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Ansible]]></title>
    <link href="http://e30chris.github.io/installing-ansible/"/>
    <updated>2014-06-16T13:15:00-07:00</updated>
    <id>http://e30chris.github.io/installing-ansible</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>Need to deploy an Ansible Controller to run Playbooks from that uses the latest build and is easy to upgrade/configure.</p>

<h2>The Solution</h2>

<p>Install Ansible from the latest release on GitHub.</p>

<h2>The Goal</h2>

<p>Create an Ansible Controller directory that will run the latest version via git clone and setup the shell with the Ansible environment scripts.</p>

<!-- more -->


<hr />

<h2>Clone the Ansible repo</h2>

<p>Go to the GitHub project page <a href="https://github.com/ansible/ansible">github/ansible</a></p>

<p>Choose a release version or the dev branch and clone.</p>

<p><code>
sandor@pineapplez:$ mkdir ~/Codestuff/AnsibleController &lt;-- Ansible runs from here
sandor@pineapplez:$ mkdir ~/Codestuff/ansibles &lt;-- Playbooks go here
sandor@pineapplez:$ touch ~/Codestuff/ansibles/ansible_hosts &lt;-- Server inventory goes here
sandor@pineapplez:$ cd ~/Codestuff/AnsibleController
sandor@pineapplez:$ git clone git@github.com:ansible/ansible.git
</code></p>

<h2>Run the environment script</h2>

<p><code>
sandor@pineapplez:$ ./hacking/env-setup
</code></p>

<p>To upgrade Ansible just go back into the AnsibleController directory and use git to get the latest.</p>

<p>You are now setup to run Ansible from the Controller.  Because the inventory file is inside the playbook dir or ~/Codestuff/ansibles/ansible_hosts it will not get overwritten if you change the AnsibleController dir.</p>

<p>Push some SSH public keys and start pushing playbooks!</p>
]]></content>
  </entry>
  
</feed>
